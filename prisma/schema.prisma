// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "sqlite"
  url      = "file:dev.sqlite"
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model StoreConnection {
  id                 String              @id @default(cuid())
  shop               String              // The shop that owns this connection
  name               String              // Friendly name for the connection
  storeDomain        String              // Production store domain
  encryptedToken     String              // Encrypted access token
  environment        String              @default("production") // production, staging, etc.
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  // Relations
  syncLogs           SyncLog[]
  resourceMappings   ResourceMapping[]
  unmappedReferences UnmappedReference[]

  @@unique([shop, storeDomain])
  @@index([shop])
}

model SyncLog {
  id              String    @id @default(cuid())
  shop            String
  connectionId    String
  syncType        String    // metafield_definitions, products, etc.
  status          String    // success, partial, failed
  summary         String?   // JSON summary of results
  logs            String?   // JSON array of log entries
  startedAt       DateTime  @default(now())
  completedAt     DateTime?

  // Relations
  connection      StoreConnection @relation(fields: [connectionId], references: [id], onDelete: Cascade)

  @@index([shop, syncType])
  @@index([connectionId])
}

// Resource mapping for tracking production -> staging ID mappings
model ResourceMapping {
  id                String   @id @default(cuid())
  resourceType      String   // 'product', 'collection', 'market', 'location', 'page', 'file', 'metaobject', 'variant', 'navigation'
  productionId      String   // Shopify ID from production (numeric part)
  stagingId         String   // Shopify ID from staging (numeric part)
  productionGid     String   // Full GID from production
  stagingGid        String   // Full GID from staging
  matchKey          String   // The actual key used for matching (handle, name, filename, type, etc.)
  matchValue        String   // The value of the match key
  syncId            String?  // Optional sync identifier (from custom.custom_id metafield if present)
  title             String?  // Resource title for display
  storeConnectionId String
  lastSyncedAt      DateTime @default(now())
  metadata          String?  // JSON for additional data (e.g., selectedOptions for variants)

  storeConnection   StoreConnection @relation(fields: [storeConnectionId], references: [id], onDelete: Cascade)

  @@unique([storeConnectionId, resourceType, productionId])
  @@index([storeConnectionId, resourceType])
  @@index([storeConnectionId, matchKey, matchValue])
  @@index([syncId])
}

// Track unmapped GID references found during sync
model UnmappedReference {
  id                String   @id @default(cuid())
  storeConnectionId String
  resourceType      String   // Extracted from GID (e.g., 'Product', 'Collection')
  productionGid     String   // The GID that couldn't be mapped
  productionId      String   // Numeric ID from the GID
  context           String   // Where it was found (e.g., "product:123 metafield:custom.related_products")
  foundInSyncType   String   // Which sync found it (e.g., "products", "collections")
  attemptedAt       DateTime @default(now())
  resolved          Boolean  @default(false)
  resolvedAt        DateTime?

  storeConnection   StoreConnection @relation(fields: [storeConnectionId], references: [id], onDelete: Cascade)

  @@unique([storeConnectionId, productionGid, context])
  @@index([storeConnectionId, resolved])
  @@index([resourceType, resolved])
}
